{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"w6MmeBUBJ-9E","executionInfo":{"status":"ok","timestamp":1692430222441,"user_tz":-120,"elapsed":19831,"user":{"displayName":"Minette Farrell","userId":"01705235156346613231"}}},"outputs":[],"source":["# @title Setup\n","from google.colab import auth\n","from google.cloud import bigquery\n","from google.colab import data_table\n","\n","project_id = \"hackathon-1123-395609\"\n","data = \"hackhathon_data\"\n","tables = \"hackathon_tables\"\n","\n","project = project_id\n","# location = '|location|' # Location inserted based on the query results selected to explore\n","client = bigquery.Client(project=project)\n","data_table.enable_dataframe_formatter()\n","auth.authenticate_user()"]},{"cell_type":"code","source":["# Run sql query\n","def run_sql(sql):\n","    script = sql\n","    query_job = client.query(sql)\n","    result = query_job.result()\n","    return result\n","\n","def test():\n","    sql = f\"\"\"Select * from {project_id}.{tables}.driver_backup;\"\"\"\n","    results = run_sql(sql)\n","    for result in results:\n","        print(result)"],"metadata":{"id":"KdVVIB3rso3W","executionInfo":{"status":"ok","timestamp":1692430314083,"user_tz":-120,"elapsed":3,"user":{"displayName":"Minette Farrell","userId":"01705235156346613231"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["## Create the 'driver_backup' table\n","def create_driver():\n","    sql_create_driver_table = f\"\"\"\n","    CREATE OR REPLACE TABLE `{project_id}.{tables}.driver_backup` (\n","        vehicleid INT64\n","    )\n","    \"\"\"\n","    query_job = client.query(sql_create_driver_table)\n","    query_job.result()\n","\n","\n","## Select all the vehicle ids and store in table_names\n","def select_table_names():\n","    result = run_sql(f\"\"\"SELECT table_id FROM `{project_id}.{data}.__TABLES__` \"\"\")\n","    table_names = [row.table_id for row in result][:-3]\n","    return table_names\n","\n","## Add vehicle ids to the driver_backup table in hackathon_tables\n","# Loop through table names and extract vehicleid using SQL\n","def insert_vehicleid():\n","    table_names = select_table_names()\n","    for table_name in table_names:\n","        results = run_sql(f\"\"\"\n","        SELECT distinct(vehicleid) FROM `{project_id}.{data}.{table_name}`\n","        \"\"\")\n","\n","        # Insert vehicleid values into the driver_backup table\n","        for row in results:\n","            vehicleid = row.vehicleid\n","            run_sql(f\"\"\"INSERT INTO {project_id}.{tables}.driver_backup (vehicleid) VALUES ({vehicleid})\"\"\")\n","\n","\n","def alter_driver_claims_drop():\n","    run_sql(f\"\"\"Alter table {project_id}.{tables}.driver_backup DROP COLUMN claims\"\"\")\n","\n","def insert_over_speed_limit():\n","    table_names = select_table_names()\n","    run_sql(f\"\"\"Alter table {project_id}.{tables}.driver_backup ADD COLUMN IF NOT EXISTS overSpeed INT64\"\"\")\n","    for table_name in table_names:\n","        results = run_sql(f\"\"\"UPDATE `{project_id}.{tables}.driver_backup`\n","                            SET overSpeed = (\n","                            SELECT COUNT(*)\n","                            FROM `{project_id}.{data}.{table_name}`\n","                            WHERE speed > 1.1*road_speed\n","                            )\n","                            WHERE vehicleid = {table_name};\n","                        \"\"\")\n","\n","def insert_gps_lost_count():\n","    table_names = select_table_names()\n","    sql = f\"\"\"Alter table {project_id}.{tables}.driver_backup ADD COLUMN IF NOT EXISTS gps_lost_count INT64;\"\"\"\n","    run_sql(sql)\n","    for table_name in table_names:\n","        sql = f\"\"\"UPDATE `{project_id}.{tables}.driver_backup`\n","                            SET gps_lost_count = (\n","                            SELECT COUNT(*)\n","                            FROM `{project_id}.{data}.{table_name}`\n","                            WHERE event_description='GPS_Lost'\n","                            )\n","                            WHERE vehicleid = {table_name};\n","                        \"\"\"\n","        results = run_sql(sql)\n","\n","def insert_telematics_off_count():\n","    table_names = select_table_names()\n","    sql = f\"\"\"Alter table {project_id}.{tables}.driver_backup ADD COLUMN IF NOT EXISTS telematics_off_count INT64;\"\"\"\n","    run_sql(sql)\n","    for table_name in table_names:\n","        sql = f\"\"\"UPDATE `{project_id}.{tables}.driver_backup`\n","                            SET telematics_off_count = (\n","                            SELECT COUNT(*)\n","                            FROM `{project_id}.{data}.{table_name}`\n","                            WHERE event_description='Power OFF'\n","                            )\n","                            WHERE vehicleid = {table_name};\n","                        \"\"\"\n","        results = run_sql(sql)\n","\n","def insert_normal_braking():\n","    table_names = select_table_names()\n","    sql = f\"\"\"Alter table {project_id}.{tables}.driver_backup ADD COLUMN IF NOT EXISTS normal_braking INT64;\"\"\"\n","    run_sql(sql)\n","    for table_name in table_names:\n","        sql = f\"\"\"UPDATE `{project_id}.{tables}.driver_backup`\n","                            SET normal_braking = (\n","                            select count(linear_g) from `{project_id}.{data}.{table_name}` WHERE (linear_g < 0.1 AND linear_g > -0.1)\n","                            )\n","                            WHERE vehicleid = {table_name};\n","                        \"\"\"\n","        results = run_sql(sql)\n","\n","def insert_harsh_braking():\n","    table_names = select_table_names()\n","    sql = f\"\"\"Alter table {project_id}.{tables}.driver_backup ADD COLUMN IF NOT EXISTS harsh_braking INT64;\"\"\"\n","    run_sql(sql)\n","    for table_name in table_names:\n","        sql = f\"\"\"UPDATE `{project_id}.{tables}.driver_backup`\n","                            SET harsh_braking = (\n","                            select count(linear_g) from `{project_id}.{data}.{table_name}` WHERE ((linear_g < 0.3 AND linear_g > -0.3) AND NOT (linear_g < 0.1 AND linear_g > -0.1))\n","                            )\n","                            WHERE vehicleid = {table_name};\n","                        \"\"\"\n","        results = run_sql(sql)\n","\n","def insert_emergency_braking():\n","    table_names = select_table_names()\n","    sql = f\"\"\"Alter table {project_id}.{tables}.driver_backup ADD COLUMN IF NOT EXISTS emergency_braking INT64;\"\"\"\n","    run_sql(sql)\n","    for table_name in table_names:\n","        sql = f\"\"\"UPDATE `{project_id}.{tables}.driver_backup`\n","                            SET emergency_braking = (\n","                            select count(linear_g) from `{project_id}.{data}.{table_name}` WHERE ((linear_g < 0.5 AND linear_g > -0.5) AND NOT (linear_g < 0.3 AND linear_g > -0.3))\n","                            )\n","                            WHERE vehicleid = {table_name};\n","                        \"\"\"\n","        results = run_sql(sql)\n","\n","def insert_critical_braking():\n","    table_names = select_table_names()\n","    sql = f\"\"\"Alter table {project_id}.{tables}.drivers ADD COLUMN IF NOT EXISTS CriticalBraking INT64;\"\"\"\n","    run_sql(sql)\n","    for table_name in table_names:\n","        sql = f\"\"\"UPDATE `{project_id}.{tables}.drivers`\n","                            SET CriticalBraking = (\n","                            select count(linear_g) from `{project_id}.{data}.{table_name}` WHERE (linear_g > 0.5) OR (linear_g < -0.5)\n","                            )\n","                            WHERE vehicleid = {table_name};\n","                        \"\"\"\n","        results = run_sql(sql)\n","\n","def insert_corner_speeding():\n","    table_names = select_table_names()\n","    for table_name in table_names:\n","        results = run_sql(f\"\"\"Alter table {project_id}.{tables}.driver_backup ADD COLUMN IF NOT EXISTS cornerSpeeding INT64;\n","                            UPDATE `{project_id}.{tables}.driver_backup`\n","                            SET cornerSpeeding = (\n","                            SELECT COUNT(*)\n","                            FROM `{project_id}.{data}.{table_name}`\n","                            WHERE speed > road_speed\n","                            AND event_description ='Corner'\n","                            )\n","                            WHERE vehicleid = {table_name};\"\"\")\n","\n","def insert_idle_time():\n","    table_names = select_table_names()\n","    sql = f\"\"\"ALTER TABLE {project_id}.{tables}.driver_backup ADD COLUMN IF NOT EXISTS idle_ratio FLOAT64;\"\"\"\n","    run_sql(sql)\n","    for table_name in table_names:\n","        sql = f\"\"\"\n","                UPDATE `{project_id}.{tables}.driver_backup`\n","                SET idle_ratio = (\n","                    SELECT idle / total as idle_ratio\n","                    FROM (\n","                        SELECT\n","                            SUM(CASE WHEN event_description LIKE 'Idle%' THEN 1 ELSE 0 END) AS idle,\n","                            COUNT(*) AS total\n","                        FROM `{project_id}.{data}.{table_name}`\n","                    ) subquery\n","                )\n","                WHERE vehicleid = {table_name};\n","                \"\"\"\n","        results = run_sql(sql)\n","\n","def insert_average_distance_stops():\n","    sql = f\"\"\"alter table `hackathon_tables.driver_backup` add column if not exists bad_driver BOOL;\n","                alter table `hackathon_tables.driver_backup` add column if not exists average_distance_per_stop FLOAT64;\n","                alter table `hackathon_tables.driver_backup` add column if not exists average_number_of_stops_per_day FLOAT64;\n","            update `hackathon_tables.driver_backup` as driver\n","            set driver.bad_driver = updated.bad_driver,\n","            driver.average_distance_per_stop = updated.average_distance_per_stop,\n","            driver. average_number_of_stops_per_day = updated.average_number_of_stops_per_day\n","            from `hackathon-1123-395609.hackathon_tables.updated_stops` as updated\n","            where driver.vehicleid=updated.vehicleid\"\"\"\n","    run_sql(sql)\n","\n","def insert_classified_time_of_day():\n","    run_sql(f\"\"\"Alter table `{project_id}.{tables}.drivers` ADD COLUMN IF NOT EXISTS dangerousTimes INT64\"\"\")\n","    table_names = select_table_names()\n","    for table_name in table_names:\n","        results = run_sql(f\"\"\"UPDATE `{project_id}.{tables}.drivers`\n","                            SET dangerousTimes = (\n","                            SELECT COUNT(*)\n","                            FROM `{project_id}.{data}.{table_name}`\n","                            WHERE EXTRACT(HOUR FROM timestamp) >= 0\n","                            AND EXTRACT(HOUR FROM timestamp) < 4\n","                            )\n","                            WHERE vehicleid = {table_name};\n","                        \"\"\")\n","    # Print the query results\n","        for row in results:\n","            print(\"Row:\", row)\n","\n","def insert_classified_area():\n","    run_sql(f\"\"\"Alter table `{project_id}.{tables}.drivers` ADD COLUMN IF NOT EXISTS DangerousAreas INT64\"\"\")\n","    table_names = select_table_names()\n","    for table_name in table_names:\n","        results = run_sql(f\"\"\"UPDATE `{project_id}.{tables}.drivers`\n","                            SET DangerousAreas = (\n","                            SELECT COUNT(*)\n","                            FROM `{project_id}.{data}.{table_name}`\n","                            WHERE MP_NAME IN ('Nyanga', 'Khayelitsha', 'Delft', 'Mitchells Plain', 'Langa', 'Gugulethu', 'Manenberg', 'Bishop Lavis', 'Hanover park')\n","                            )\n","                            WHERE vehicleid = {table_name};\n","                        \"\"\")"],"metadata":{"id":"gEG6clgdtACD","executionInfo":{"status":"ok","timestamp":1692430250969,"user_tz":-120,"elapsed":448,"user":{"displayName":"Minette Farrell","userId":"01705235156346613231"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["# print(\"create driver\")\n","# create_driver()\n","# print(\"vehicle id\")\n","# insert_vehicleid()\n","# print(\"over speed\")\n","# insert_over_speed_limit()\n","# print(\"gps lost\")\n","# insert_gps_lost_count()\n","# print(\"telematics off\")\n","# insert_telematics_off_count()\n","# print(\"normal\")\n","# insert_normal_braking()\n","# print(\"harsh\")\n","# insert_harsh_braking()\n","# print(\"emergency\")\n","# insert_emergency_braking()\n","# print(\"critical\")\n","# insert_critical_braking()\n","# print(\"idle\")\n","# insert_idle_time()\n","# print(\"claims\")\n","# insert_average_distance_stops()\n","# print(\"time of day\")\n","# insert_classified_time_of_day()\n","# insert_classified_area()"],"metadata":{"id":"_AuPYs9dtCII"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"cell_execution_strategy":"setup","provenance":[{"file_id":"/v2/external/notebooks/bigquery_job.ipynb","timestamp":1692430168647}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}